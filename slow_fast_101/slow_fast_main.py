# -*- coding: utf-8 -*-
"""slow_fast_kinect_color.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17v526CTAk_ElzyAqTsFIxGz2ZPpsB20G
"""
import torch
import torch.nn as nn
import pytorch_lightning as pl
from torch.utils.data import DataLoader
from pytorchvideo.models.hub import slowfast_r101
from pytorchvideo.models.head import ResNetBasicHead
from dataset import load_and_merge_csv, split_dataset, get_transform, CustomVideoDataset
from trainer import VideoClassificationLightningModule, load_trained_model, evaluate_on_validation, predict_action


if __name__ == '__main__':
    DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
    kinect_path= r'C:\Final_project_Sesac\cut_videos\kinect_color'

    # CSV 파일 병합 및 데이터셋 나누기
    directory_path = r"C:\Final_project_Sesac\cut_videos\kinect_color"
    merged_df = load_and_merge_csv(directory_path)

    # 데이터 나누기
    train_df, val_df, test_df = split_dataset(merged_df, test_size=0.1, val_size=0.2, stratify_column="label_idx")
    
    transform = get_transform()
    
    train_dataset = CustomVideoDataset(train_df, transform=transform, kinect_path = kinect_path)
    val_dataset = CustomVideoDataset(val_df, transform=transform, kinect_path = kinect_path)
    test_dataset = CustomVideoDataset(test_df, transform=transform, kinect_path = kinect_path)

    # DataLoader 생성
    train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True, num_workers=0)
    val_loader = DataLoader(val_dataset, batch_size=8, shuffle=False, num_workers=0)
    test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False, num_workers=0)
    
    # Model Setup
    num_classes = 39
    pretrained_model = slowfast_r101(pretrained=True)
    pretrained_model.blocks[-1] = ResNetBasicHead(
        proj=torch.nn.Linear(pretrained_model.blocks[-1].proj.in_features, num_classes),
        dropout=nn.Dropout(0.5),
    )
    from pytorch_lightning.loggers import CSVLogger

    csv_logger = CSVLogger("logs", name="slowfast_r101_1122")

    args = {"lr": 0.01, "momentum": 0.9, "weight_decay": 1e-4, "max_epochs": 30, "num_classes": num_classes}
    model = VideoClassificationLightningModule(pretrained_model, args)

    # trainer = pl.Trainer(precision='16-mixed', max_epochs=args["max_epochs"], accelerator="gpu", devices=1, accumulate_grad_batches=4,logger=csv_logger)
    # trainer.fit(model, train_loader, val_loader)

    # Test
    # trainer.test(model, test_loader)

    # Save Model
    torch.save(model.model.state_dict(), "bfb_slowfast_r101_1122_kinect.pth")
    print("Model weights saved to: bfb_slowfast_r101_1122_kinect.pth")

    torch.save(model.model.state_dict(), "bfb_slowfast_r101_1122_kinect.pth")


    # 학습된 가중치 파일 경로
    weights_path = "./bfb_slowfast_r101_1122_kinect.pth"


    # 모델 불러오기
    pretrained_model = slowfast_r101(pretrained=True)
    num_classes = 39
    pretrained_model.blocks[-1] = ResNetBasicHead(
        proj=torch.nn.Linear(pretrained_model.blocks[-1].proj.in_features, num_classes),
        dropout=nn.Dropout(0.5),
    )

    # 가중치 로드
    model = load_trained_model(pretrained_model, weights_path)

    # Validation 데이터로 정확도 평가
    # evaluate_on_validation(model, test_loader)
    
    video_path = r'C:\Final_project_Sesac\cut_videos\kinect_color\vp6\run1_2018-05-23-10-21-45_cut_3797.mp4'
    csv_path = r'C:\Final_project_Sesac\cut_videos\label_map_midlevel.csv'
    
    act = predict_action(model, video_path, csv_path, DEVICE)
    print(act)
    
    
    